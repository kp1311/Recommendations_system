#Recommendation file
#A dicitonary of movie critics and their ratings of a small
#set of movies

critics={'Lisa Rose':{'Lady in Water':2.5,'Snakes on a Plane':3.5,
                      'Just My Luck':3.0,'Superman Returns':3.5,
                      'You,Me and Dupree':2.5,'The Night Listener':3.0},
        'Gene Seymour':{'Lady in Water':3.0,'Snakes on a Plane':3.5,
                        'Just My Luck':1.5,'Superman Returns':5.0,
                        'You,Me and Dupree':3.5,'The Night Listener':3.0},
        'Michael Philips':{'Lady in Water':2.5,'Snakes on a Plane':3.0,
                           'Superman Returns':3.5,'The Night Listener':4.0},
        'Claudia Puig':{'Snakes on a Plane':3.5,'Just My Luck':3.0,
                        'Superman Returns':4.0,'You,Me and Dupree':2.5,
                        'The Night Listener':4.5},
        'Mick LaSalle':{'Lady in Water':3.0,'Snakes on a Plane':4.0,
                        'Just My Luck':2.0,'Superman Returns':3.0,
                        'You,Me and Dupree':2.0,'The Night Listener':3.0},
        'Jack Mathews':{'Lady in Water':3.0,'Snakes on a Plane':4.0,
                        'Superman Returns':5.0,'You,Me and Dupree':3.5,
                        'The Night Listener':3.0},
        'Toby':{'Snakes on a Plane':4.5,'Superman Returns':4.0,
                'You,Me and Dupree':1.0}}
               

#CAluculating the similarity score using pearson method
def sim_pearson(pref,p1,p2):
     #FInding out similar item from two sets
    si={}
    for item in prefs[p1]:
        if item in prefs[p2]:si[item]=1


    n=len(si)

    #If there are no similar items then returning 0
    if n==0: return 0

    #Caluclating sum of individual elemnts of sets
    sum1=sum([prefs[p1][it] for it in si])
    sum2=sum([prefs[p2][it] for it in si])

   #Caluclaitng sum of squares of different elements of sets
    sum1Sq=sum([pow(prefs[p1][it],2)for it in si])
    sum2Sq=sum([pow(prefs[p2][it],2)for it in si])

    #Claulating the product sum
    pSum=sum([prefs[p1][it]*prefs[p2][it] for it in si])

    num=pSum-(sum1*sum2/n)
    den=sqrt((sum1Sq-pow(sum1,2)/n)*sum2Sq-pow(sum2,2)/n)

    if den==0: return 0

    r=num/den

    return r

#Finding top matches respective to the given person
#Ranking the critics 
def topMatches(prefs,person,n=5,similarity=sim_pearson):
    scores=[(similarity(prefs,person,other),other)
            for other in prefif other!=person]

    #Sort the list so that highest score appears on top
    scores.sort()
    scores.reverse()
    return scores[0:n]



#  get the recommendations for a person using a weighted average
def getRecommendations(prefs,prson,similarity=sim_person):
    totals={}
    simSums={}
    for other in prefs:

        #dont compare me to my self
        if other==person:continue
        sim=similarity(prefs,person,other)

        #ignore scores of 0 or lower
        if sim<=0 :continue
        for items in prefs[other]:

            #Only score movies I havent seen yet
            if item not in prefs[person] or prefs[person][item]]==0:
                #similarity* score
                totals.setdefault(item,0)
                totals[item]+=frefs[other][item]*sim
                #Sum of Similarities
                simSums.setdefault(item,0)
                simSums[item]+=sim

         #Create normalized list
                rankings=[(total/simSums[item],item)for item,total in totals.items()]


                #Return sorted list
                rankings.sort()
                rankings.reverse()
                return rankings



def  transformPerfs(prefs):
    result={}
    for person in prefs:
        for item in prefs[person]:
            result.setdefault(item,{})

            #Flip item and person
            result[item][person]=prefs[person][item]

     return result       



def calculatesSimilarities(prefs,n=10):
     #Create dictionary of items showing which other items they
     #are most similar to.

     result={}

     #Invert the preference matrix to be item centric
     itemsPrefs=transformPerfs(prefs)
     c=0
     for item in itemPrefs:
         #stsys update for large datasets
         c+=1
         if c%100==0:print"%d /%d %(c,len(itemPrefs))"

         #Find most similar items to this one
         scores=topMatches(itemPrefs,item ,n=n,similarity=sim_pearson)
         results[item]=scores

      return result   



def getRecommendations(prefs,itemMatch,user):
    userRatings=prefs[user]
    scores={}
    totalSim={}

    #Loop over items rated by this user
    for(similarity,item2) in itemMatch[item]:

        #Ignore if the user hasd already rated the item
        if item2 in userRatings:continue

        #Weighted sum of rating times similarity
        scores.setdefault(item2,0)
        scores[item2]+=similarity*ratings

        #Sum of all the similarities
        totalSim.setdefault(item2,0)
        totalSim[item2]+=similarity

    #Divide total score by total weighting of average
        rankings=[(score/totalSim[item],item)forf item ,score in scores.items()]



        #Retur ranking from highest to lowest
        rankings.sort()
        rankings.reverse()
        return rankings
